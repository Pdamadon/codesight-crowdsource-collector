// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id                  String   @id @default(uuid())
  demographics        Json
  assignedScenarios   Json
  currentStep         Int      @default(1)
  status              String   @default("active")
  qualityScore        Int      @default(0)
  bonusEligible       Boolean  @default(false)
  bonusAmount         Decimal  @default(0) @db.Decimal(10, 2)
  validationData      Json?
  completedScenarios  String[]
  qualityMetrics      Json?
  scenarioRatings     Json?
  overallFeedback     String?
  ipAddress           String?
  userAgent           String?
  createdAt           DateTime @default(now())
  lastActivity        DateTime @default(now())
  completedAt         DateTime?
  submittedAt         DateTime?

  // Relations
  recordings Recording[]
  
  @@map("sessions")
}

model Recording {
  id            String   @id @default(uuid())
  sessionId     String
  scenarioId    String
  videoUrl      String?
  audioUrl      String?
  duration      Int?     // seconds
  fileSize      BigInt?  // bytes
  clickCount    Int      @default(0)
  clicks        Json     @default("[]")
  transcription String?
  status        String   @default("processing")
  qualityScore  Int?
  errorMessage  String?
  createdAt     DateTime @default(now())
  processedAt   DateTime?

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("recordings")
}

model Worker {
  id             String   @id @default(uuid())
  fiverrUsername String?  @unique
  email          String?  @unique
  demographics   Json?
  totalSessions  Int      @default(0)
  averageQuality Decimal  @default(0) @db.Decimal(3, 2)
  bonusEarned    Decimal  @default(0) @db.Decimal(10, 2)
  status         String   @default("active")
  notes          String?
  createdAt      DateTime @default(now())
  lastActive     DateTime?

  @@map("workers")
}

// Indexes for performance
model SessionIndex {
  @@map("session_indexes")
  @@ignore
}

// Add indexes manually in migration
// CREATE INDEX idx_sessions_status ON sessions(status);
// CREATE INDEX idx_sessions_created_at ON sessions(created_at);
// CREATE INDEX idx_recordings_session_id ON recordings(session_id);
// CREATE INDEX idx_recordings_status ON recordings(status);
// CREATE INDEX idx_workers_fiverr_username ON workers(fiverr_username);